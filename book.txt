#include <iostream>
#include <string>
#include <stdexcept>
using namespace std;

// Base class: Publication
class Publication {
protected:
    string title;
    float price;

public:
    // Default constructor
    Publication() : title(""), price(0.0) {}

    // Parameterized constructor
    Publication(string t, float p) : title(t), price(p) {}

    // Virtual function for input
    virtual void input() {
        cout << "Enter title: ";
        cin.ignore();
        getline(cin, title);
        cout << "Enter price: ";
        cin >> price;
        if (price < 0) {
            throw invalid_argument("Price cannot be negative.");
        }
    }

    // Virtual function for display
    virtual void display() const {
        cout << "Title: " << title << endl;
        cout << "Price: $" << price << endl;
    }
};

// Derived class: Book
class Book : public Publication {
private:
    int pageCount;

public:
    // Default constructor
    Book() : Publication(), pageCount(0) {}

    // Parameterized constructor
    Book(string t, float p, int pc) : Publication(t, p), pageCount(pc) {}

    // Overriding input function
    void input() override {
        Publication::input();
        cout << "Enter page count: ";
        cin >> pageCount;
        if (pageCount < 0) {
            throw invalid_argument("Page count cannot be negative.");
        }
    }

    // Overriding display function
    void display() const override {
        Publication::display();
        cout << "Page Count: " << pageCount << endl;
    }
};

// Derived class: Tape
class Tape : public Publication {
private:
    float playingTime;

public:
    // Default constructor
    Tape() : Publication(), playingTime(0.0) {}

    // Parameterized constructor
    Tape(string t, float p, float pt) : Publication(t, p), playingTime(pt) {}

    // Overriding input function
    void input() override {
        Publication::input();
        cout << "Enter playing time (in minutes): ";
        cin >> playingTime;
        if (playingTime < 0) {
            throw invalid_argument("Playing time cannot be negative.");
        }
    }

    // Overriding display function
    void display() const override {
        Publication::display();
        cout << "Playing Time: " << playingTime << " minutes" << endl;
    }
};

int main() {
    Book book;
    Tape tape;

    try {
        cout << "Enter details for book:" << endl;
        book.input();
    } catch (const exception& e) {
        cerr << "Exception: " << e.what() << endl;
        book = Book(); // Reset data to zero values
    }

    try {
        cout << "\nEnter details for tape:" << endl;
        tape.input();
    } catch (const exception& e) {
        cerr << "Exception: " << e.what() << endl;
        tape = Tape(); // Reset data to zero values
    }

    cout << "\nDetails of Book:" << endl;
    book.display();

    cout << "\nDetails of Tape:" << endl;
    tape.display();

    return 0;
}

